https://code.visualstudio.com/ > Install
https://nodejs.org/en > Install
https://cloud.mongodb.com/ > Create Account
https://www.mongodb.com/products/tools/compass > Install
https://www.mongodb.com/products/self-managed/community-edition > Install

vscode-icons
gitlens
npm Intellisense

Async Non Blocking SingleThreaded


package.json
> entry point to the app
> meta data
> all the packages you are using
> command (start,test,build)

// Step to generate package.json
*NodejS must be there in the laptop
> go inside the folder using cmd/terminal
> npm init
> answer all question
> type "yes"

// Step to install package
*NodejS must be there in the laptop
> go inside the folder using cmd/terminal
> npm i packagename/ npm install packagename

C > create   POST
R > Read     GET
U > Update   PUT/PATCH
D > Delete   DELETE

var a = 10
var b = "HI My Age is "+a
"HI My Age is 10"


var a = 10
var b = `HI My Age is ${a}`
"HI My Age is 10"

Normal
> Wrt to app
> Used inside the same app
> npm i packageName

Dev
> only used for development purpose
> npm i packageName --save-dev


Global
> Install in laptop
> need admin access
> used before app start
#win
* open cmd as admin
> npm i -g packagename

#mac/linux
> open terminal
> sudo npm i -g packagename

> npm i -g nodemon

SQL         Mongodb
Database    Database
Table       Collections
Row         Document
Select      Find
Insert      Insert
Delete      Remove
Update      update/upsert

json
> Javascript Object Notation
[
    {
        "name":"Test1",
        "city":"Amsterdam"
    },
    {
        "name":"Test2",
        "city":"London"
    }
]


SQl
RollNo | Hindi | English | Computer
  1    |  80   |         |
  2    |       |  75     |
  3    |  90   |         |    80

Mongodb
[
    {
        RollNo:1,
        Hindi:80,
    },
    {
        RollNo:2,
        English:75
    },
    {
        RollNo:3,
        Hindi:90,
        Computer:80
    }
]

C:\ProgrammFile
make Folder By Name of  data
insidr "data" folder make new folder db
C:\ProgrammFile\data\db

Server (27017)

* open cmd
> C:\ProgrammFile\mongodb\7\bin
> mongod
> do not close this cmd till you are using mongo

Clinet
> C:\ProgrammFile\mongodb\7\bin
> mongosh

mongodb://localhost:27017

> show dbs
> use dbname
> show collections

* Get all records
db.users.find()
> db.collectionName.find()

* to create new db
> use dbname

* to Insert
> db.user.insertOne({"name":"test"})

_id
> primary key
> unique 
12 byte in size
4 bytes > timeStamp
5 bytes > Random Number
3 bytes > counter


db.location.find({state_id:1})

# projection
db.location.find({condition},{projection})
db.location.find({},{projection})

db.location.find({state_id:1},{state_id:1,location_name:1,_id:0,code:1})


mongodb+srv://admin:<db_password>@cluster0.f8vmc.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0



params
> what we pass after /
> we need to define in the code
> once define we need to pass
> should add 1 or 2 only and user to add condition

queryParams
> what we pass after ?
> no need to define
> not complusory to pass
> can pass multiples and use for filters

    // let stateId = Number(req.query.stateId)
    // let abc = Number(req.query.abc)\
..

db.orders.updateOne(
    {orderId:1},
    {
        $set:{
            "menuItem[0]":"On The Way",
            discount:"10%"
        }
    }
)

db.orders.updateOne(
    {orderId:1},
    {
        $unset:{
            discount:1
        }
    }
)

// delete all records
db.orders.remove({})

// delete on the basis of condition
db.orders.remove({orderId:1})

//softdelete
db.orders.updateOne(
    {orderId:1},
    {
        $set:{
            deleteStatus:1
        }
    }
)


npm i swagger-jsdoc swagger-ui-express

npm i -g pm2

pm2 start filename
pm2 start app.js

pm2 status

pm2 stop app.js

//////Step to generate react app////
* Nodejs Must be installed

# install global package
> npm i -g create-react-app 
> go inside folder where you want app
> creat-react-app appName


> npx creat-react-app appName

> npm create vite@latest
> select react
> select Javascript

classComponent
> Logical Component

Functional
> Dumb Component

Hooks
useState 
useEffect

function add(a,b){
    let out = [a,b]
    return out
}

add(1,2)
2

state
> Act like a local variable
> every component can have its own state
> when state update happen component will re-render

props
> Help to share data between component
> we do not change any value in props
> from 
    parent > child  (props)
    child > parent (props with callback)



(get) cityname >           http://3.17.216.66:4000/location
(get) restwrtcity >        http://3.17.216.66:4000/restaurant?stateId=1
(get) quickSearch>         http://3.17.216.66:4000/quicksearch

(get) onbasisofMeal >      http://3.17.216.66:4000/restaurant?mealtype_id=
(get) cuisinefilter >      http://3.17.216.66:4000/filter/4?cuisine=1
(get) costfilter >         http://3.17.216.66:4000/filter/1?hcost=1000&lcost=500

(get) restdetails >        http://3.17.216.66:4000/details/1
(get) menu >               http://3.17.216.66:4000/menu/1

(post) orderspage >        http://3.17.216.66:4000/menuItem
                           body [1,4,5]
(post)placeOrder >        

(get) allorder>            
       
(get) restaurants>         http://3.17.216.66:4000/restaurants

npm i -g json-server


json-server --watch data.json --port 9888


# GetAllUser
* (GET)> http://3.17.216.66:5000/api/auth/users

# Register
* (POST)> http://3.17.216.66:5000/api/auth/register 
(body) => {"name":"Aakash","email":"aa@gmail.com","password":"12345678","phone":343432,role?":"user"}

# Login
* (POST) => http://3.17.216.66:5000/api/auth/login 
(body) => {"email":"aa@gmail.com","password":"12345678"}
 (response)=> {auth:true,token:'dgsdg'}

# UserInfo (GET) => http://3.17.216.66:5000/api/auth/userinfo
* (Header) => {'x-access-token':'token value from login'}
